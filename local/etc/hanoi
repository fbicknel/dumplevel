#!/usr/bin/perl
use strict;
use warnings;

# Based on an algorithm I found at http://oeis.org/A007814
#
# Which goes like this:
# To construct the sequence: start with 0,1, concatenate to get
# 0,1,0,1. Add + 1 to last term gives 0,1,0,2. Concatenate those 4 terms
# to get 0,1,0,2,0,1,0,2. Add + 1 to last term etc. - Benoit Cloitre,
# Mar 06 2003
#
# I modified it very slightly: you can start with 0, then concatenate
# to get 0,0.  Now add 1 to the last term, and so on as above.
#
my @a = (0);
my $n = $ARGV[0]; # We'll keep going until we hit this value
my $inverse = $ARGV[1];
#
# $inverse may be 1 to indicate you simply want to invert the sequence in
# place, so you get
# 5 4 5 3 5 4 5 2 5 4 5 3 5 4 5 1 5 4 5 3 5 4 5 2 5 4 5 3 5 4 5 0
# for example with $n = 5.
# 
# You can also ask for $inverse = 9, which will invert, but offset so that
# '9' is the base or lease significant level, so:
# 9 8 9 7 9 8 9 6 ... 9 4
# which is different in that it ends in '4' rather than '0'.  After that
# the entire sequence repeats.
# 
$n ||= 9;
$n = 9 if $n < 0;
my $requested = $n;

# implements the algorithm above:
while ($n) {
	my @b = @a;
	@a = (@a, @b);
	$a[-1] += 1;
	$n -= 1;
}

# Now if you asked for the inverse:
if ($inverse) {
    $inverse = $requested if $inverse < $requested;
    @a = map { $inverse - $_ } @a;
}
print "@a\n";
